#summary Console command list
#labels console

<wiki:toc max_depth="4" />

= Introduction =

The OrientDB Console is a Java Application made to work against OrientDB databases and Server instances.

_NOTE: Current release of OrientDB doesn't propagate the schema changes to all the threads/clients. This is the reason why you could experience synchronization problems if these changes happen while multiple connections are opened. Waiting for the fix of this problem (http://code.google.com/p/orient/issues/detail?id=85) we suggest to change the schema when no connections are opened or at the database creation._

== Interactive mode ==
This is the default mode. Just launch the console by executing the script *bin/console.sh* (or *bin/console.bat* in MS Windows systems). Assure to have execution permission on it.

Once started the console is ready to accepts commands.
{{{
ORIENT database v.0.9.13 www.orientechnologies.com
Type 'help' to display all the commands supported.

>
}}}

To know all the supported commands look to [#Console_Commands commands].

== Batch mode ==
To execute commands in batch mode run the *bin/console.sh* (or *bin/console.bat* in MS Windows systems) script passing all the commands separated with semicolon ";". Example:

{{{> console.bat "connect remote:localhost/demo;select * from profile"}}}

Or call the console script passing the name of the file in text format containing the list of commands to execute. Commands must be separated with semicolon ";". Example:

{{{> console.bat commands.txt}}}


= Console commands =

To know all the commands supported by the Orient console open it and type *help* or *?*.

|| *Command* || *Description* ||
|| [ConsoleCommandAlterClass alter class] || Change the class schema ||
|| [ConsoleCommandAlterProperty alter property] || Change the class's property schema ||
|| [ConsoleCommandBrowseClass browse class] || Browses all the records of a class ||
|| [ConsoleCommandBrowseCluster browse cluster] || Browses all the records of a cluster ||
|| [ConsoleCommandClasses classes] || Displays all the configured classes ||
|| [ConsoleCommandClusters clusters] || Displays all the configured clusters ||
|| [ConsoleCommandConfig config] || Displays the configuration where the opened database is located (local or remote) ||
|| [ConsoleCommandConfigGet config get] || Returns a configuration value ||
|| [ConsoleCommandConfigSet config set] || Set a configuration value ||
|| [ConsoleCommandConnect connect] || Connects to a database ||
|| [ConsoleCommandCreateDb create database] || Creates a new database ||
|| [ConsoleCommandCreateCluster create cluster] || Creates a new cluster inside a database ||
|| [ConsoleCommandDelete delete] || Deletes a record from the database using the SQL syntax. To know more about the [SQLQuery SQL syntax go here] ||
|| [ConsoleCommandDictionaryKeys dictionary keys] || Displays all the keys in the database dictionary ||
|| [ConsoleCommandDictionaryGet dictionary get] || Loookups for a record using the dictionary. If found set it as the current record ||
|| [ConsoleCommandDictionaryPut dictionary put] || Inserts or modify an entry in the database dictionary. The entry is composed by key=String, value=record-id ||
|| [ConsoleCommandDictionaryRemove dictionary remove] || Removes the association in the dictionary ||
|| [ConsoleCommandDisconnect disconnect] || Disconnects from the current database ||
|| [ConsoleCommandDisplayRecord display record] || Displays current record's attributes ||
|| [ConsoleCommandExport export database] || Exports a database ||
|| [ConsoleCommandExportRecord export record] || Exports a record in any of the supported format (i.e. json)||
|| [ConsoleCommandGet get] || Returns the value of a property ||
|| [ConsoleCommandImport import database] || Imports a database previously exported ||
|| [ConsoleCommandInfo info] || Displays information about current status ||
|| [ConsoleCommandInfo info class] || Displays information about a class ||
|| [ConsoleCommandInsert insert] || Inserts a new record in the current database using the SQL syntax. To know more about the [SQLQuery SQL syntax go here] ||
|| [ConsoleCommandDeclareIntent declare intent] || Declare an intent ||
|| [ConsoleCommandLoadRecord load record] || Loads a record in memory and set it as the current one ||
|| [ConsoleCommandReloadRecord reload record] || Reloads a record in memory and set it as the current one ||
|| [ConsoleCommandProfiler profiler] || Control the profiler ||
|| [ConsoleCommandProperties properties] || Returns all the configured properties ||
|| [ConsoleCommandSelect select] || Executes a SQL query against the database and display the results. To know more about the [SQLQuery SQL syntax go here] ||
|| [ConsoleCommandSet set] || Changes the value of a property ||
|| [ConsoleCommandTruncateClass truncate class] || Remove all the records of a class (by truncating all the underlying configured clusters) ||
|| [ConsoleCommandTruncateCluster truncate cluster] || Remove all the records of a cluster ||
|| [ConsoleCommandUpdate update] || Updates a record in the current database using the SQL syntax. To know more about the [SQLQuery SQL syntax go here] ||
|| help || Prints this help ||
|| exit || Closes the console ||

= Extend the console with custom command =
Edit the [http://www.google.com/codesearch#Q2eMNvxgD0M/trunk/tools/src/main/java/com/orientechnologies/orient/console/OConsoleDatabaseApp.java&q=oconsoleda%20package:http://orient%5C.googlecode%5C.com OConsoleDatabaseApp] class and add a new method. There's an auto discovering system that put the new method between the available commands. To provide a description of the command use the annotations (look below). The command name must follow the Java code convention where to separate works just use the Camel-case.

So, for example, if you want to create the brand new "move cluster" command:
{{{
@ConsoleCommand(description = "Move the physical location of cluster files")
public void moveCluster(
  @ConsoleParameter(name = "cluster-name", description = "The name or the id of the cluster to remove") String iClusterName,
  @ConsoleParameter(name = "target-path", description = "path of the new position where to move the cluster files") String iNewPath ) {

  checkCurrentDatabase(); // THE DB MUST BE OPENED

  System.out.println("Moving cluster '" + iClusterName + "' to path " + iNewPath + "...");
}
}}}
If you type:
{{{
> console
> help
}}}
Your new command will appear. And now try:
{{{
> move cluster foo /temp

Moving cluster 'foo' to path /temp...
}}}

Don't miss to contribute your command to the OrientDB community! ;-)