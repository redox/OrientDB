#summary SQL Queries
#labels sql,Query

Orient supports the SQL language to execute queries against the engine. Look at the [SQLWhere#Operators operators] and [SQLWhere#Functions functions].

= Syntax ==
{{{SELECT [<Projections>] FROM <Target> [WHERE <Condition>*] [ORDER BY <Fields>* [ASC|DESC]*] [LIMIT <MaxRecords>]}}}

 * *[#Projections Projections]*, optionals, are what you want to extract from the query as result set. Look at [#Projections Projections]. Available since 0.9.25.
 * *Target* can be a class, a cluster, a single [Concepts#RecordID RID] or a set of [Concepts#RecordID RID]s. *Class* is the class name where to execute the query, while specyfing *cluster* with the 'cluster:' prefix is the cluster name where to execute the query. Use one or more [Concepts#RecordID RID]s to specify one or a small set of record. Useful to navigate graphs starting from some root nodes
 * *[SQLWhere WHERE]* condition is common to the other SQL commands and it's described apart.
 * *ORDER BY* is the same of the SQL syntax specifying fields with optionally the versus (default is ASCending)
 * *LIMIT* sets the maximum record the query can return

_NOTE: Starting from 1.0rc7 the *RANGE* keyword has been removed. To execute range queries use the BETWEEN operator against @rid as explained  in [Pagination]._

==Projections==
In the standard SQL projections are mandatory, but in OrientDB if omitted the entire record is returned, namely the equivalent of "{{{*}}}" keyword, but the record's identity and version are preserved. Example:
{{{
SELECT FROM Account
}}}

By using the wildcard {{{*}}} the fields retrieved will be the same but the RID and version will be lost:
{{{
SELECT * FROM Account
}}}

So remember that when use projections a new temporary document is created and the @rid and @version of the original record are lost.

OrientDB has extended projections to allow special operators like {{{[]}}}, example: 
{{{
SELECT items[quantity=10] FROM Order
}}}

The convention naming for the returned document's fields are:
 * the field name for plain fields {{{invoice -> invoice}}}
 * the first field name for chained fields, like {{{invoice.customer.name -> invoice}}}
 * the name of the function for functions, like {{{max(salary) -> max}}}

If the target field already exists, a progressive number is used as prefix. Example:
{{{
SELECT max(incoming), max(cost) FROM Balance
}}}

Will return a document with the field {{{max}}} and {{{max2}}}.

To override the field name use {{{AS}}}. Example:
{{{
SELECT max(incoming) AS incoming, max(cost) AS costs FROM Balance
}}}

Projections are available since 0.9.25.

= Examples =

Get all the records of type 'Person' where the name starts with 'Luk':

{{{select * from Person where name like 'Luk%'}}}

or

{{{select * from Person where name.left(3) = 'Luk'}}}

or

{{{select * from Person where name.substring(0,3) = 'Luk'}}}

Get all the records of type '!AnimalType' where the collection 'races' contains at least one entry where the first character of the name, ignoring the case, is equals to 'e':

{{{select * from animaltype where races contains (name.toLowerCase().subString(0,1) = 'e')}}}

Get all the records of type '!AnimalType' where the collection 'races' contains at least one entry with name 'European' or 'Asiatic':

{{{select * from animaltype where races contains (name in ['European','Asiatic'])}}}

Get all the records of type 'Profile' where any field contains the word 'danger':

{{{select from profile where any() like '%danger%'}}}

Get any record at any level that has the word 'danger':

{{{select from profile where any() traverse ( any() like '%danger%' )}}}

Get all the records where up to the 3rd level of connections has some field that contains the word 'danger' ignoring the case:

{{{select from Profile where any() traverse( 0,3 ) ( any().toUpperCase().indexOf( 'danger' )}}} > -1 )

Order the result set by the 'name' in descending order:

{{{select from Profile order by name desc}}}

Traverse record starting from a root node:

{{{select from 11:4 where any() traverse(0,10) (address.city = 'Rome') }}}

Query only a set of records:

{{{select from [#10:3, #10:4, #10:5]}}}

Select only three fields from Profile:

{{{select nick, followings, followers from Profile}}}

Select the 'name' field in upper-case and the 'country name' of the linked city of the 
linked city of the address:

{{{select name.toUppercase(), address.city.country.name from Profile}}}

To know more about other SQL commands look at [SQL SQL commands].