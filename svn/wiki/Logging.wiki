#summary One-sentence summary of this page.

<wiki:toc max_depth="4" />

OrientDB uses the Java Logging framework bundled with the Java Virtual Machine.

== Install Log formatter ==
OrientDB Server uses own LogFormatter. To use the same by your application call:
{{{
OLogManager.installCustomFormatter();
}}}

Before 1.0rc2 the custom LogFormatter was installed automatically.

== Configuration file ==
The logging strategies and policies can be configured using a file following the Java syntax: [http://www.javapractices.com/topic/TopicAction.do?Id=143 Java Logging configuration].

Example taken from  orient-server.properties:
{{{
# Specify the handlers to create in the root logger
# (all loggers are children of the root logger)
# The following creates two handlers
handlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler

# Set the default logging level for the root logger
.level = ALL

# Set the default logging level for new ConsoleHandler instances
java.util.logging.ConsoleHandler.level = INFO

# Set the default logging level for new FileHandler instances
java.util.logging.FileHandler.level = CONFIG

# Set the default formatter for new ConsoleHandler instances
java.util.logging.ConsoleHandler.formatter = com.orientechnologies.common.log.OLogFormatter

# Naming style for the output file
java.util.logging.FileHandler.pattern=../log/orient-server.log
java.util.logging.FileHandler.formatter = com.orientechnologies.common.log.OLogFormatter

# Limiting size of output file in bytes:
java.util.logging.FileHandler.limit=10000000

# Number of output files to cycle through, by appending an
# integer to the base file name:
java.util.logging.FileHandler.count=10
}}}

To tell to the JVM where the properties file is placed you need to set the _"java.util.logging.config.file"_ system property to it. Example:

{{{
> java -Djava.util.logging.config.file=mylog.properties ...
}}}

== Set the logging level ==
To change the logging level without modify the logging configuration just set the _"orient.log.level"_ system variable to the requested level. Supported levels are those contained in the JRE class [http://java.sun.com/j2se/1.5.0/docs/api/java/util/logging/Level.html java.util.logging.Level]:
 * SEVERE (highest value)
 * WARNING
 * INFO
 * CONFIG
 * FINE
 * FINER
 * FINEST (lowest value)

=== At startup ==
Set the system property _"orient.log.level"_ to the level you want using the -D parameter of java.

Example:
{{{
> java -Dorient.log.level=FINE ...
}}}

=== At run-time ===
The system variable can be setted at startup using the {{{System.setProperty()}}} API. Example:
{{{
public void main(String[] args){
  System.setProperty("orient.log.level", "FINE");
  ...
}
}}}
}}}