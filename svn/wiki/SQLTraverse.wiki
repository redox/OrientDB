#summary Traverse command
Index of contents:
<wiki:toc max_depth="2" />

Traverse is a special command that retrieves the connected records crossing the relationships. This command works not only with graph API but at document level. This means you can traverse relationships between invoice and customers without the need to model the domain using the Graph API.

= Syntax =
{{{TRAVERSE [<[class.]field>|*|any()|all()] FROM <target> [WHERE <condition>*]  [LIMIT <max-records>]}}}

 * *[#Fields fields]* are the list of fields you want to traverse.
 * *[#Target target]* can be a class, one or more clusters, a single [Concepts#RecordID RID], a set of [Concepts#RecordID RID]s or another command like another TRAVERSE (as recursion) or a [SQLQuery SELECT]
 * *[SQLWhere where]* condition stops the traverse when is false. Usually it's used to limit the traversing depth by using {{{$depth < <x>}}} where x is the maximum level of depth you want to reach. *$depth* is the first context variable that reports the depth level during traversal
 * *max-records* sets the maximum result the command can return

==Fields==
Are the list of fields you want to traverse. If {{{*}}}, any() or all() are specified then all the fields are traversed. This could be costly so to optimize the traverse use the pertinent fields. You can also specify fields at class level. [Inheritance Polymorphism] is supported, so by specifying Person.city and Customer class extends Person, you will traverse Customer instances too.

Field names are case-sensitive, classes not.

== Target ==
Target can be:
 * *Class* is the class name to browse all the record to be traversed. You can avoid to specify *class:* as prefix
 * *Cluster* with the prefix 'cluster:' is the cluster name where to execute the query
 * A set of [Concepts#RecordID RID]s inside square brackets to specify one or a small set of records. This is useful to navigate graphs starting from some root nodes
 * A root record specifying its [Concepts#RecordID RID]
= Examples =
== Traverse all the fields of a root record==
Assuming #10:1234 is the [Concepts#RID RID] of the record to start traversing:
{{{
traverse * from #10:1234
}}}

== Social Network domain ==
In a social-network-like domain a profile is linked to all the friends. Below some commands.
===Specify fields and depth level===
Assuming #10:1234 is the [Concepts#RID RID] of the record to start traversing get all the friends up to the third level of depth:
{{{
traverse friends from #10:1234 where $depth <= 3
}}}
=== Mix with select to have more power ===
Traverse command can be combined with [SQLQuery SQL SELECT] statement to filter the result set. Below the same example above but filtering by Rome as city:
{{{
select from ( traverse friends from #10:1234 where $depth <= 3 ) where city = 'Rome'
}}}

Another example to extract all the movies of actors that have worked, at least once, in any movie produced by J.J. Abrams:
{{{
select from (
  traverse Movie.actors, Actor.movies from (
    select from Movie where producer = "J.J. Abrams"
  ) where $depth <= 3
) where @class = 'Movie'
}}}

= Using TRAVERSE with Graph model and API =
Even if the TRAVERSE command can be used with any domain model, the place where is more used is the [GraphDatabase Graph Database] model.

Following this model all is based on the concepts of the Vertex (or Node) as the class "V" and the Edge (or Arc, Connection, Link, etc.) as the class "E". So if you want to traverse in a direction you have to use the class name when declare the traversing fields. Below the directions:
 * *OUTGOING*, use {{{V.out, E.in}}} because vertices are connected with the "out" field but the edge exits as "in" field.
 * *INCOMING*, use {{{V.in, E.out}}} because vertices are connected with the "in" field but the edge enters as "out" field.

Example of traversing all the outgoing vertices found starting from the vertex with id #10:3434:
{{{
traverse V.out, E.in from #10:3434
}}}

So in a mailing-like domain to find all the messages sent in 1/1/2012 from the user 'Luca' assuming it's stored in the 'User' Vertex class and that messages are contained in the 'Message' Vertex class. Sent messages are stored as "out" connections of Edge class 'SentMessage':

{{{
select from (
  traverse V.out, E.in from (
    select from User where name = 'Luca'
  ) where $depth <= 2 and (@class = 'Message' || ( @class = 'SentMessage' and sentOn = '01/01/2012') )
) where @class = 'Message'
}}}

To know more about other SQL commands look at [SQL SQL commands].